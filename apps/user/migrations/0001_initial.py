# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2019-04-14 11:26
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_name', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='用户名')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女')], default='female', max_length=6, verbose_name='性别')),
                ('user_phone', models.CharField(blank=True, max_length=11, null=True, verbose_name='用户电话')),
                ('user_avator', models.ImageField(blank=True, default='avator/default.jpg', null=True, upload_to='avator/', verbose_name='头像')),
                ('user_email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='用户邮箱')),
                ('is_realname', models.BooleanField(default=False, verbose_name='是否实名')),
                ('user_creditscore', models.IntegerField(verbose_name='会员的重要程度/经验值')),
                ('user_introduction', models.TextField(verbose_name='个人介绍')),
                ('user_exrea', models.TextField(verbose_name='备注')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'fb_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_name', models.CharField(max_length=10, verbose_name='姓名')),
                ('address_phone', models.CharField(max_length=11, verbose_name='电话')),
                ('address_address', models.CharField(max_length=50, verbose_name='地址')),
                ('address_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_address', to=settings.AUTH_USER_MODEL, verbose_name='所属用户')),
            ],
        ),
        migrations.CreateModel(
            name='role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(choices=[('1', '普通用户'), ('2', '采购'), ('3', '收购'), ('4', '运输'), ('5', '店铺')], default='普通用户', max_length=32, unique=True, verbose_name='角色')),
                ('role_permissions', models.CharField(blank=True, max_length=255, verbose_name='角色权限字符串')),
                ('role_extra', models.CharField(blank=True, max_length=50, null=True, verbose_name='备注')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='上次更新时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '角色',
                'verbose_name_plural': '角色',
                'db_table': 'fb_role',
            },
        ),
        migrations.CreateModel(
            name='verified',
            fields=[
                ('verified_id', models.AutoField(primary_key=True, serialize=False)),
                ('verified_name', models.CharField(max_length=10, verbose_name='真实姓名')),
                ('verified_idcard', models.CharField(max_length=18, verbose_name='身份证号')),
                ('verified_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_verified', to=settings.AUTH_USER_MODEL, verbose_name='实名用户')),
            ],
            options={
                'verbose_name': '实名认证',
                'verbose_name_plural': '实名认证',
                'db_table': 'fb_verified',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(blank=True, to='user.role', verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
